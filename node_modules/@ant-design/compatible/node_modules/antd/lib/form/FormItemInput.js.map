{"version":3,"sources":["form/FormItemInput.jsx"],"names":["iconMap","success","CheckCircleFilled","warning","ExclamationCircleFilled","error","CloseCircleFilled","validating","LoadingOutlined","FormItemInput","prefixCls","wrapperCol","children","errors","onDomErrorVisibleChange","hasFeedback","validateStatus","extra","baseClassName","formContext","React","useContext","FormContext","mergedWrapperCol","className","changedVisible","visible","cacheErrors","IconNode","icon","subFormContext","labelCol","motionClassName"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;;;;;;;AACA,IAAMA,OAAO,GAAG;AACZC,EAAAA,OAAO,EAAEC,wBADG;AAEZC,EAAAA,OAAO,EAAEC,8BAFG;AAGZC,EAAAA,KAAK,EAAEC,wBAHK;AAIZC,EAAAA,UAAU,EAAEC;AAJA,CAAhB;;AAMA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,OAA+G;AAAA,MAA5GC,SAA4G,QAA5GA,SAA4G;AAAA,MAAjGC,UAAiG,QAAjGA,UAAiG;AAAA,MAArFC,QAAqF,QAArFA,QAAqF;AAAA,MAA3EC,MAA2E,QAA3EA,MAA2E;AAAA,MAAnEC,uBAAmE,QAAnEA,uBAAmE;AAAA,MAA1CC,WAA0C,QAA1CA,WAA0C;AAAA,MAA7BC,cAA6B,QAA7BA,cAA6B;AAAA,MAAbC,KAAa,QAAbA,KAAa;AACjI,MAAMC,aAAa,aAAMR,SAAN,UAAnB;AACA,MAAMS,WAAW,GAAGC,KAAK,CAACC,UAAN,CAAiBC,oBAAjB,CAApB;AACA,MAAMC,gBAAgB,GAAGZ,UAAU,IAAIQ,WAAW,CAACR,UAA1B,IAAwC,EAAjE;AACA,MAAMa,SAAS,GAAG,sCAAcN,aAAd,eAAuCK,gBAAgB,CAACC,SAAxD,CAAlB;;AAJiI,wBAKlG,0BAAeX,MAAf,EAAuB,UAAAY,cAAc,EAAI;AACpE,QAAIA,cAAJ,EAAoB;AAChBX,MAAAA,uBAAuB,CAAC,IAAD,CAAvB;AACH;AACJ,GAJ8B,CALkG;AAAA;AAAA,MAK1HY,OAL0H;AAAA,MAKjHC,WALiH,wBAUjI;;;AACA,MAAMC,QAAQ,GAAGZ,cAAc,IAAIhB,OAAO,CAACgB,cAAD,CAA1C;AACA,MAAMa,IAAI,GAAGd,WAAW,IAAIa,QAAf,GAA2B;AAAM,IAAA,SAAS,YAAKV,aAAL;AAAf,KACpC,oBAAC,QAAD,OADoC,CAA3B,GAEA,IAFb,CAZiI,CAejI;;AACA,MAAMY,cAAc,GAAG,SAAc,EAAd,EAAkBX,WAAlB,CAAvB;;AACA,SAAOW,cAAc,CAACC,QAAtB;AACA,SAAOD,cAAc,CAACnB,UAAtB;AACA,SAAQ,oBAAC,oBAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEmB;AAA7B,KACN,oBAAC,eAAD,eAASP,gBAAT;AAA2B,IAAA,SAAS,EAAEC;AAAtC,MACE;AAAK,IAAA,SAAS,YAAKN,aAAL;AAAd,KACGN,QADH,EAEGiB,IAFH,CADF,EAKE,oBAAC,qBAAD;AAAW,IAAA,OAAO,EAAEH,OAApB;AAA6B,IAAA,UAAU,EAAC,WAAxC;AAAoD,IAAA,UAAU,EAAE,sBAAM;AACtEZ,MAAAA,uBAAuB,CAAC,KAAD,CAAvB;AACH,KAFG;AAED,IAAA,YAAY,MAFX;AAEY,IAAA,aAAa;AAFzB,KAGG,iBAAoC;AAAA,QAAtBkB,eAAsB,SAAjCR,SAAiC;AACvC,WAAQ;AAAK,MAAA,SAAS,EAAE,sCAAcN,aAAd,eAAuCc,eAAvC,CAAhB;AAAyE,MAAA,GAAG,EAAC;AAA7E,OACCL,WADD,CAAR;AAGH,GAPG,CALF,EAcGV,KAAK,IAAI;AAAK,IAAA,SAAS,YAAKC,aAAL;AAAd,KAA2CD,KAA3C,CAdZ,CADM,CAAR;AAkBH,CArCD;;eAsCeR,a","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport { LoadingOutlined, CloseCircleFilled, CheckCircleFilled, ExclamationCircleFilled, } from '@ant-design/icons';\nimport CSSMotion from 'rc-animate/lib/CSSMotion';\nimport Col from '../grid/col';\nimport { FormContext } from './context';\nimport { useCacheErrors } from './util';\nconst iconMap = {\n    success: CheckCircleFilled,\n    warning: ExclamationCircleFilled,\n    error: CloseCircleFilled,\n    validating: LoadingOutlined,\n};\nconst FormItemInput = ({ prefixCls, wrapperCol, children, errors, onDomErrorVisibleChange, hasFeedback, validateStatus, extra, }) => {\n    const baseClassName = `${prefixCls}-item`;\n    const formContext = React.useContext(FormContext);\n    const mergedWrapperCol = wrapperCol || formContext.wrapperCol || {};\n    const className = classNames(`${baseClassName}-control`, mergedWrapperCol.className);\n    const [visible, cacheErrors] = useCacheErrors(errors, changedVisible => {\n        if (changedVisible) {\n            onDomErrorVisibleChange(true);\n        }\n    });\n    // Should provides additional icon if `hasFeedback`\n    const IconNode = validateStatus && iconMap[validateStatus];\n    const icon = hasFeedback && IconNode ? (<span className={`${baseClassName}-children-icon`}>\n        <IconNode />\n      </span>) : null;\n    // Pass to sub FormItem should not with col info\n    const subFormContext = Object.assign({}, formContext);\n    delete subFormContext.labelCol;\n    delete subFormContext.wrapperCol;\n    return (<FormContext.Provider value={subFormContext}>\n      <Col {...mergedWrapperCol} className={className}>\n        <div className={`${baseClassName}-control-input`}>\n          {children}\n          {icon}\n        </div>\n        <CSSMotion visible={visible} motionName=\"show-help\" onLeaveEnd={() => {\n        onDomErrorVisibleChange(false);\n    }} motionAppear removeOnLeave>\n          {({ className: motionClassName }) => {\n        return (<div className={classNames(`${baseClassName}-explain`, motionClassName)} key=\"help\">\n                {cacheErrors}\n              </div>);\n    }}\n        </CSSMotion>\n        {extra && <div className={`${baseClassName}-extra`}>{extra}</div>}\n      </Col>\n    </FormContext.Provider>);\n};\nexport default FormItemInput;\n"],"file":"FormItemInput.js"}