{"version":3,"sources":["form/util.js"],"names":["React","useForm","useRcForm","scrollIntoView","useDebounce","content","delay","useState","cache","setCache","useEffect","length","timeout","setTimeout","clearTimeout","useCacheErrors","errors","changeTrigger","debounceErrors","cacheErrors","setCacheErrors","visible","setVisible","newVisible","toArray","candidate","undefined","Array","isArray","getFieldId","namePath","formName","mergedId","join","getScrollableContainer","current","node","nodeName","toLowerCase","getComputedStyle","overflowY","scrollHeight","clientHeight","parentElement","ownerDocument","form","wrapForm","__INTERNAL__","scrollToField","name","fieldId","document","getElementById","onlyScrollIfNeeded"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useForm as useRcForm } from 'rc-field-form';\nimport scrollIntoView from 'dom-scroll-into-view';\n/**\n * We will remove light way shake like:\n * errors -> none -> errors (in 100 ms)\n * to\n * errors (in 100 ms)\n */\nfunction useDebounce(content, delay = 10) {\n    const [cache, setCache] = React.useState(content);\n    // React hooks still have bug with unmount setState\n    // https://github.com/facebook/react/issues/15057\n    React.useEffect(() => {\n        if (content.length) {\n            setCache(content);\n        }\n        else {\n            const timeout = setTimeout(() => {\n                setCache(content);\n            }, delay);\n            return () => {\n                clearTimeout(timeout);\n            };\n        }\n    }, [content]);\n    return cache;\n}\n/**\n * Cache latest errors and trigger change event if visible change\n */\nexport function useCacheErrors(errors, changeTrigger) {\n    const debounceErrors = useDebounce(errors);\n    const [cacheErrors, setCacheErrors] = React.useState(debounceErrors);\n    const [visible, setVisible] = React.useState(false);\n    React.useEffect(() => {\n        const newVisible = !!debounceErrors.length;\n        if (debounceErrors.length) {\n            setCacheErrors(debounceErrors);\n        }\n        if (newVisible !== visible) {\n            changeTrigger(newVisible);\n        }\n        setVisible(newVisible);\n    }, [debounceErrors]);\n    return [visible, cacheErrors];\n}\nexport function toArray(candidate) {\n    if (candidate === undefined || candidate === false)\n        return [];\n    return Array.isArray(candidate) ? candidate : [candidate];\n}\nexport function getFieldId(namePath, formName) {\n    if (!namePath.length)\n        return undefined;\n    const mergedId = namePath.join('_');\n    return formName ? `${formName}_${mergedId}` : mergedId;\n}\n// Source: https://github.com/react-component/form/blob/master/src/createDOMForm.js\nfunction getScrollableContainer(current) {\n    let node = current;\n    let nodeName;\n    /* eslint no-cond-assign:0 */\n    while (node && (nodeName = node.nodeName.toLowerCase()) !== 'body') {\n        const { overflowY } = getComputedStyle(node);\n        // https://stackoverflow.com/a/36900407/3040605\n        if (node !== current &&\n            (overflowY === 'auto' || overflowY === 'scroll') &&\n            node.scrollHeight > node.clientHeight) {\n            return node;\n        }\n        node = node.parentElement;\n    }\n    return nodeName === 'body' ? node.ownerDocument : node;\n}\nexport function useForm(form) {\n    const wrapForm = form || Object.assign(Object.assign({}, useRcForm()[0]), { __INTERNAL__: {}, scrollToField: name => {\n            const namePath = toArray(name);\n            const fieldId = getFieldId(namePath, wrapForm.__INTERNAL__.name);\n            const node = fieldId ? document.getElementById(fieldId) : null;\n            if (node) {\n                scrollIntoView(node, getScrollableContainer(node), {\n                    onlyScrollIfNeeded: true,\n                });\n            }\n        } });\n    return [wrapForm];\n}\n"],"file":"util.js"}